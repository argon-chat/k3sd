# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:
    inputs:
      bump:
        description: "Which part of the version to bump?"
        required: false
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Fetch dependencies
        run: go mod download

      - name: Build
        run: go build -v -o k3sd ./cli/main.go

      - name: Archive build artifact
        run: tar -czvf k3sd.tar.gz k3sd

      - name: Determine next version
        id: next_version
        uses: actions/github-script@v6
        env:
          BUMP: ${{ github.event.inputs.bump || 'patch' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const bump = process.env.BUMP || 'patch';
            
            console.log(`Selected bump: ${bump}`);
            
            const latest = await github.rest.repos.getLatestRelease({ owner, repo }).catch(() => null);
            const currentVersion = latest ? latest.data.tag_name.replace(/^v/, '') : '0.0.0';
            
            let [major, minor, patch] = currentVersion.split('.').map(Number);
            
            switch (bump) {
              case 'major':
                major++;
                minor = 0;
                patch = 0;
                break;
              case 'minor':
                minor++;
                patch = 0;
                break;
              default:
                patch++;
            }
            
            const nextVersion = `v${major}.${minor}.${patch}`;
            console.log(`Next version: ${nextVersion}`);
            core.setOutput('tag', nextVersion);


      - name: Create Tag and Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.next_version.outputs.tag }}
          release_name: Release ${{ steps.next_version.outputs.tag }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./k3sd.tar.gz
          asset_name: k3sd.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release built files
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./k3sd
          asset_name: k3sd-x86_64
          asset_content_type: application/octet-stream